#!/bin/sh
# This script will
# 1. create an EKS cluster
# 2. create an external IP
# 3. add a context to $HOME/.kube/config
# 5. Install tiller with a dedicated service account

set -e

workdir=$(mktemp -d)

trap "rm -rf '${workdir}'" EXIT

function print_help(){
  cat <<EOF
Usage: ${0} ARGS (up|down)
-q - quiet output
-c NAME - Name of the cluster to use. Defaults to USERNAME-cluster
-n NODES - number of nodes to use. Defaults to 2
-k VERSION - Kubernetes version to use. Defaults to 1.10
-r REGION - Region to install the cluster in
up - create a cluster
down - delete a cluster
EOF
}

function echo_unless_quiet(){
  message="${@}"
  if [ "${quiet}" != "true" ]
  then
    echo "${@}"
  fi
}

function install_eksctl(){
  kernel_name=$(uname -s)
  release="latest_release" #TODO: install a specific version that we know works
  case ${kernel_name} in
    Darwin|Linux)
      curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/${release}/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C ${workdir}
      ;;
    *)
      >&2 echo "Sorry, ${kernel_name} is not supported"
      exit 1
      ;;
  esac
}

# Set default values
cluster_name="${USER}-cluster"
nodes=2
kubernetes_version="1.10"
reqion="us-east-2"

while getopts qc:n:kr: opt
do
  case "${opt}" in
    q)
      quiet=true
      ;;
    c)
      cluster_name="${OPTARG}"
      ;;
    n)
      nodes="${OPTARG}"
      ;;
    k)
      kubernetes_version="${OPTARG}"
      ;;
    r)
      region="${OPTARG}"
      ;;
    [?])
      print_help
      ;;
  esac
done
shift $((OPTIND -1))

# Check if eksctl is installed, and download a temporary version if not
if ! which eksctl > /dev/null
then
  echo_unless_quiet "eksctl is not installed"
  echo_unless_quiet "We will download the executable from the internet, and install it to a temporary location"
  echo_unless_quiet "To avoid this in the future, install eksctl to your environment"
  echo_unless_quiet "https://eksctl.io/"
  install_eksctl
  export PATH="${workdir}:$PATH"
fi

# Ensure we can connect to aws
if ! eksctl get cluster -v 0 > /dev/null
then
  >&2 echo "Cannot connect to AWS. Ensure credentials are configured"
  exit 1
fi

case ${1} in
  up)
    # TODO: We should support autoscaling as well
    eksctl create cluster --name=${cluster_name} --nodes=${nodes} --version=${kubernetes_version} --region=${region}
    #TODO install helm
    ;;
  down)
    eksctl delete cluster --name ${cluster_name}
    ;;
  *)
    print_help
    exit 1
esac
